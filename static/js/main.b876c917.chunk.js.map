{"version":3,"sources":["assets/icons/check.svg","assets/icons/cross.svg","components/UI/Button/Button.js","components/AddForm/AddForm.js","components/Footer/Footer.js","components/Header/Header.js","components/TaskItem/TaskItem.js","components/TaskList/TaskList.js","App.js","reportWebVitals.js","index.js"],"names":["Btn","styled","button","Button","props","type","aria-label","ariaLabel","className","onClick","onMouseOver","onMouseOut","children","Form","form","AddForm","useState","task","setTask","isMouseOver","setIsMouseOver","isAdding","setIsAdding","disable","setDisable","resetInputHandler","onSubmit","event","preventDefault","taskData","id","Math","random","toString","trim","length","onPassTask","value","placeholder","onChange","target","autoFocus","src","cross","alt","Footer","H1","h1","Header","TaskItem","isChecked","setIsChecked","isExpand","setIsExpand","isEditMode","setEditMode","deleteHandler","taskId","onDeleteTask","isNewValue","setIsNewValue","isSaveValue","setIsSaveValue","defaultValue","Tasks","ul","TaskList","deleteTaskHandler","updatedTasks","tasks","filter","onUpdateTasks","map","dummy_tasks","App","setTasks","prevTasks","check","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b876c917.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/check.df4443c1.svg\";","export default __webpack_public_path__ + \"static/media/cross.9e0d39d1.svg\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Btn = styled.button`\n  cursor: pointer;\n  font-size: calc(14px + 1vmin);\n  padding: 0.25em 1em;\n  border-radius: 0.25em;\n  border: 1px solid #c9c7c9;\n  color: #504f50;\n  height: 2em;\n  margin: 0.5em 0.25em;\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\n    rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;\n\n  &:hover {\n    box-shadow: none;\n  }\n`;\n\nconst Button = (props) => {\n  return (\n    <Btn\n      type={props.type}\n      aria-label={props.ariaLabel}\n      className={props.className}\n      onClick={props.onClick}\n      onMouseOver={props.onMouseOver}\n      onMouseOut={props.onMouseOut}\n    >\n      {props.children}\n    </Btn>\n  );\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport cross from '../../assets/icons/cross.svg';\nimport Button from \"../UI/Button/Button\";\n\nconst Form = styled.form`\n  display: grid;\n  margin-top: -1em;\n\n  & .input-container {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n  }\n\n  & .clear-input {\n    display: flex;\n    position: absolute;\n  }\n\n  & img {\n    min-width: 2.5em;\n    padding: 0.5em 0;\n    text-align: center;\n    cursor: pointer;\n  }\n\n  & input {\n    font-size: calc(16px + 1vmin);\n    padding: 0.4em 2em 0.4em 0.5em;\n    border-radius: 0.25em;\n    border: 1px solid #c9c7c9;\n    color: #504f50;\n    width: 100%;\n  }\n`;\n\nconst AddForm = (props) => {\n  const [task, setTask] = useState(\"\");\n  const changeTaskHandler = (event) => {\n    setTask(event.target.value);\n\n    // If there is text in the input, the \"add\" button is enabled\n    if (task.trim().length > 0) {\n      setDisable(false);\n    }\n  };\n\n  const [isMouseOver, setIsMouseOver] = useState(false);\n  const extendAddingHandler = () => {\n    setIsMouseOver(true);\n  };\n\n  const contractAddingHandler = () => {\n    setIsMouseOver(false);\n  };\n\n  const [isAdding, setIsAdding] = useState(false);\n  const startAddingHandler = () => {\n    setIsAdding(true);\n    setIsMouseOver(true);\n  };\n\n  const endAddingHandler = () => {\n    setIsAdding(false);\n    setIsMouseOver(false);\n  };\n\n  const [disable, setDisable] = useState(true);\n\n  // Add a new task\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n\n    setDisable(false);\n\n    const taskData = {\n      id: Math.random().toString(),\n      task: task,\n    };\n\n    // If the input is empty, the \"add\" button is disabled and the task will not be added\n    if (task.trim().length === 0) {\n      setDisable(true);\n      return;\n    }\n\n    resetInputHandler();\n\n    setDisable(true);\n\n    // Send the new tasks to the \"App\" component\n    props.onPassTask(taskData);\n  };\n\n  // Clear the value in the input form\n  const resetInputHandler = () => {\n    setTask(\"\");\n    setDisable(true);\n  }\n\n  return (\n    <div className=\"add-tasks\">\n      {!isAdding &&\n        (!isMouseOver ? (\n          <Button\n            type=\"button\"\n            ariaLabel=\"Extend Button\"\n            className=\"open-btn plus-btn btn\"\n            onMouseOver={extendAddingHandler}\n          />\n        ) : (\n          <Button\n            type=\"button\"\n            ariaLabel=\"Open Form\"\n            className=\"open-btn\"\n            onClick={startAddingHandler}\n            onMouseOut={contractAddingHandler}\n          >\n            Add a new task\n          </Button>\n        ))}\n      {isAdding && (\n        <Form onSubmit={formSubmitHandler}>\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              value={task}\n              placeholder=\"Add a task...\"\n              onChange={changeTaskHandler}\n              autoFocus\n            />\n            <div className=\"clear-input\" type=\"button\" onClick={resetInputHandler}>\n              <img src={cross} alt=\"cross icon\" />\n            </div>\n          </div>\n          <div className=\"button-group\">\n            <Button type=\"submit\" ariaLabel=\"Add Task\" className={disable ? \"disable\" : \"\"}>Add</Button>\n            <Button type=\"button\" ariaLabel=\"Hide Form\" onClick={endAddingHandler}>\n              Hide\n            </Button>\n          </div>\n        </Form>\n      )}\n    </div>\n  );\n};\n\nexport default AddForm;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>\n        © Copyright 2021. <strong>\"TBM85\"</strong>\n        <br /> All rights reserved\n      </p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst H1 = styled.h1`\n  & span {\n    -webkit-text-stroke-width: 1px;\n  }\n  & span:nth-child(1) {\n    color: #FF56A4;\n  }\n  & span:nth-child(2) {\n    color: #00D0FF;\n  }\n  & span:nth-child(3) {\n    color: #EDC72F;\n  }\n`;\n\nconst Header = () => {\n  return (\n    <header>\n      <H1><span>TO</span> <span>DO</span> <span>LIST</span></H1>\n    </header>\n  );\n};\n\nexport default Header;","import React, { useState } from \"react\";\n\nimport Button from \"../UI/Button/Button\";\n\nconst TaskItem = (props) => {\n  const [isChecked, setIsChecked] = useState(false);\n  const checkToggleHandler = () => {\n    setIsChecked(!isChecked);\n  };\n\n  const [isExpand, setIsExpand] = useState(false);\n  const expandListHandler = () => {\n    setIsExpand(!isExpand);\n  };\n\n  const [isEditMode, setEditMode] = useState(false);\n  const editHandler = () => {\n    setEditMode(true);\n  };\n\n  const deleteHandler = () => {\n    const taskId = props.task.id;\n    props.onDeleteTask(taskId);\n  };\n\n  // Change the value\n  const [isNewValue, setIsNewValue] = useState(\"\");\n  const updateValueHandler = (event) => {\n    setIsNewValue(event.target.value);\n  };\n\n  // Save the value\n  const [isSaveValue, setIsSaveValue] = useState(props.children);\n  const saveHandler = () => {\n    setIsSaveValue(isNewValue);\n    setEditMode(false);\n    setIsExpand(false);\n  };\n\n  // Cancel changes\n  const cancelHandler = () => {\n    setEditMode(false);\n    setIsExpand(false);\n  };\n\n  return (\n    <li className=\"task\">\n      {isExpand ? (\n        <Button\n          type=\"button\"\n          ariaLabel=\"Checkmark the task\"\n          className={`disable ${isChecked ? \"checked btn\" : \"\"}`}\n        ></Button>\n      ) : (\n        <Button\n          type=\"button\"\n          ariaLabel=\"Checkmark the task\"\n          className={`check-btn btn ${isChecked ? \"checked\" : \"\"}`}\n          onClick={checkToggleHandler}\n        ></Button>\n      )}\n      <div className=\"task-item\">\n        {!isEditMode ? (\n          <div\n            className={`task-content ${isChecked ? \"line-through\" : \"\"}`}\n            onClick={expandListHandler}\n          >\n            {isSaveValue}\n          </div>\n        ) : (\n          <input\n            type=\"text\"\n            className=\"task-input-content\"\n            defaultValue={isSaveValue}\n            onChange={updateValueHandler}\n            autoFocus\n          />\n        )}\n        {isExpand && (\n          <div className=\"expand-list\">\n            {!isEditMode ? (\n              !isChecked ? (\n                <div className=\"buttons\">\n                  <Button\n                    type=\"button\"\n                    ariaLabel=\"Edit the task\"\n                    className=\"edit-btn btn\"\n                    onClick={editHandler}\n                  />\n                  <Button\n                    type=\"button\"\n                    ariaLabel=\"Delete the task\"\n                    className=\"delete-btn btn\"\n                    onClick={deleteHandler}\n                  />\n                </div>\n              ) : (\n                <Button\n                  type=\"button\"\n                  ariaLabel=\"Delete the task\"\n                  className=\"delete-btn btn\"\n                  onClick={deleteHandler}\n                />\n              )\n            ) : (\n              <Button\n                type=\"button\"\n                ariaLabel=\"Save changes\"\n                onClick={saveHandler}\n              >\n                Save\n              </Button>\n            )}\n            <Button\n              type=\"button\"\n              ariaLabel=\"Cancel changes\"\n              className=\"cancel-btn\"\n              onClick={cancelHandler}\n            >\n              Cancel\n            </Button>\n          </div>\n        )}\n      </div>\n    </li>\n  );\n};\n\nexport default TaskItem;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport TaskItem from '../TaskItem/TaskItem';\n\nconst Tasks = styled.ul`\n  list-style: none;\n  text-align: left;\n  font-size: calc(12px + 2vmin);\n  margin-top: 0.4em;\n  padding-left: 0;\n\n  & li {\n    border-bottom: 1px solid #c9c7c9;\n    margin-bottom: 0.5em;\n    display: flex;\n    align-items: center;\n  }\n\n  & li .task-item {\n    cursor: pointer;\n    width: 100%;\n  }\n\n  & li .expand-list {\n    justify-content: flex-end;\n    display: flex;\n  }\n\n  & li .task-content {\n    margin-left: 0.5em;\n  }\n\n  & li .task-input-content {\n    font-family: \"Handlee\", cursive;\n    font-size: calc(12px + 2vmin);\n    color: #504f50;\n    width: 100%;\n    margin: 0;\n  }\n\n  @media (max-width: 575px) {\n    & li .task-item button {\n      padding: 0.25em !important;\n    }\n    & li .cancel-btn {\n      width: 4em !important;\n    }\n  }\n`;\n\nconst TaskList = (props) => {\n  // Delete a task\n  const deleteTaskHandler = (taskId) => {\n    const updatedTasks = props.tasks.filter(task => task.id !== taskId);\n\n    // Sends updated tasks to 'App' component\n    props.onUpdateTasks(updatedTasks);\n  }\n\n  return (\n    <Tasks className=\"tasks\">\n      {props.tasks.map((task) => (\n        <TaskItem task={task} key={task.id} onDeleteTask={deleteTaskHandler}>\n          {task.task}\n        </TaskItem>\n      ))}\n    </Tasks>\n  );\n};\n\nexport default TaskList;","import { useState } from 'react';\nimport './App.css';\n\nimport check from './assets/icons/check.svg';\nimport AddForm from './components/AddForm/AddForm';\nimport Footer from './components/Footer/Footer';\nimport Header from './components/Header/Header';\nimport TaskList from './components/TaskList/TaskList';\n\nconst dummy_tasks = [\n  {id: 1, task: \"Press the button in the upper right corner\"},\n  {id: 2, task: \"Introduce a new task into the input\"},\n  {id: 3, task: \"Press the 'add' button to add the task\"},\n  {id: 4, task: \"Write a new task\"},\n  {id: 5, task: \"Press the 'cross' button to delete the text entered in the input\"},\n  {id: 6, task: \"Press the 'hide' button to hide the form\"},\n  {id: 7, task: \"Press the 'checkmark' button to cross out the tasks performed\"},\n  {id: 8, task: \"Press the 'checkmark' button again to undo the cross out task\"},\n  {id: 9, task: \"Click on a task to open the editing options\"},\n  {id: 10, task: \"Press the 'edit' button to change the text in the task\"},\n  {id: 11, task: \"Change the text in the task\"},\n  {id: 12, task: \"Press the 'save' button to save the changes made\"},\n  {id: 13, task: \"Click the same task again\"},\n  {id: 14, task: \"Press the 'edit' button and change the text in the task again\"},\n  {id: 15, task: \"Press the 'cancel' button to not save the changes\"},\n  {id: 16, task: \"Click on the same task one more time\"},\n  {id: 17, task: \"Press the 'delete' button to delete a task\"},\n  {id: 18, task: \"Check a task and click on that task\"},\n  {id: 19, task: \"Click on a task again to close the editing options\"}\n];\n\nfunction App() {\n  const [tasks, setTasks] = useState(dummy_tasks);\n\n  // Receive the new task and add it to the tasks array\n  const addTaskHandler = (taskData) => {\n    setTasks((prevTasks) => {\n      return [taskData, ...prevTasks];\n    })\n  }\n\n  // Receive the updated tasks\n  const updateTasks = (updatedTasks) => {\n    setTasks(updatedTasks);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n        <div className=\"container\">\n          <AddForm onPassTask={addTaskHandler} />\n          {tasks.length > 0 ? (\n            <TaskList tasks={tasks} onUpdateTasks={updateTasks} />\n          ) : (\n            <div className=\"no-tasks\">\n              <div className=\"no-tasks-icons\">\n                <img src={check} className=\"check-icon\" alt=\"check icon\" />\n                <span>No Pending Tasks</span>\n              </div>\n            </div>\n          )}\n        </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}